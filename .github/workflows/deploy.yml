name: Deploy QuizSpark

on:
  push:
    branches: [ main ]

jobs:
  setup-terraform:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Deploy Infrastructure
        run: |
          cd terraform
          terraform init
          terraform plan -out=tfplan \
            -var="supabase_url=${{ secrets.SUPABASE_URL }}" \
            -var="supabase_key=${{ secrets.SUPABASE_KEY }}" \
            -var="jwt_secret=${{ secrets.JWT_SECRET }}"
          terraform apply -auto-approve \
            -var="supabase_url=${{ secrets.SUPABASE_URL }}" \
            -var="supabase_key=${{ secrets.SUPABASE_KEY }}" \
            -var="jwt_secret=${{ secrets.JWT_SECRET }}"

  deploy-frontend:
    needs: setup-terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install

      - name: Build frontend
        run: |
          npm run build

      - name: Deploy to S3
        run: |
          # Create a unique bucket name using timestamp
          BUCKET_NAME="quizspark-frontend-$(date +%s)"
          echo "Using bucket name: ${BUCKET_NAME}"
          
          # Create S3 bucket
          aws s3api create-bucket \
            --bucket ${BUCKET_NAME} \
            --region ap-south-1 \
            --create-bucket-configuration LocationConstraint=ap-south-1

          # First, disable all public access blocks
          aws s3api put-public-access-block \
            --bucket ${BUCKET_NAME} \
            --public-access-block-configuration "BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false"

          # Wait a few seconds for the settings to take effect
          sleep 5

          # Configure bucket policy for public access
          aws s3api put-bucket-policy \
            --bucket ${BUCKET_NAME} \
            --policy '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "PublicReadGetObject",
                  "Effect": "Allow",
                  "Principal": "*",
                  "Action": "s3:GetObject",
                  "Resource": "arn:aws:s3:::'${BUCKET_NAME}'/*"
                }
              ]
            }'

          # Enable website hosting
          aws s3api put-bucket-website \
            --bucket ${BUCKET_NAME} \
            --website-configuration '{
              "IndexDocument": {"Suffix": "index.html"},
              "ErrorDocument": {"Key": "error.html"}
            }'

          # Upload files
          aws s3 sync dist/ s3://${BUCKET_NAME} --delete

          # Set cache control for HTML files
          aws s3 cp dist/index.html s3://${BUCKET_NAME}/index.html --cache-control "no-cache, no-store, must-revalidate"

          # Set cache control for assets
          aws s3 cp dist/assets/ s3://${BUCKET_NAME}/assets/ --recursive --cache-control "max-age=31536000, immutable"

          # Output the website URL
          echo "Frontend URL: http://${BUCKET_NAME}.s3-website-ap-south-1.amazonaws.com"
          echo "::set-output name=frontend_url::http://${BUCKET_NAME}.s3-website-ap-south-1.amazonaws.com"
          echo "::set-output name=bucket_name::${BUCKET_NAME}"

  deploy-backend:
    needs: setup-terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Get EC2 IP
        id: get-ec2-ip
        run: |
          cd terraform
          echo "Current directory: $(pwd)"
          echo "Terraform version: $(terraform version)"
          terraform init
          echo "Terraform state list: $(terraform state list)"
          EC2_IP=$(terraform output -raw instance_public_ip)
          echo "EC2 IP: ${EC2_IP}"
          echo "::set-output name=ec2_ip::${EC2_IP}"

      - name: Deploy to EC2
        run: |
          # Get instance ID
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=quizspark-backend" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)

          # Check instance status
          aws ec2 describe-instance-status --instance-ids $INSTANCE_ID

      - name: Output Backend URL
        run: |
          echo "Backend API URL: http://${{ steps.get-ec2-ip.outputs.ec2_ip }}:80"
          echo "::set-output name=backend_url::http://${{ steps.get-ec2-ip.outputs.ec2_ip }}:80" 